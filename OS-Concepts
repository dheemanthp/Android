=========================================================================================================

TLB(translation look aside buffer): Speed, because it is hardware
https://en.wikipedia.org/wiki/Translation_lookaside_buffer
https://stackoverflow.com/questions/36708186/tlb-vs-page-table
Best link :https://www.gatevidyalay.com/translation-lookaside-buffer-tlb-paging/]
https://en.wikipedia.org/wiki/Page_table
https://stackoverflow.com/questions/24322135/how-page-tables-are-stored-in-the-main-memory

The CPU's memory management unit (MMU) stores a cache of recently used mappings from the operating system's page table. This is called the translation lookaside buffer (TLB), which is an associative cache.[3]

When a virtual address needs to be translated into a physical address, the TLB is searched first. If a match is found (a TLB hit), the physical address is returned and memory access can continue. However, if there is no match (called a TLB miss), the memory management unit, or the operating system TLB miss handler, will typically look up the address mapping in the page table to see whether a mapping exists (a page walk). If one exists, it is written back to the TLB (this must be done, as the hardware accesses memory through the TLB in a virtual memory system), and the faulting instruction is restarted (this may happen in parallel as well). This subsequent translation will find a TLB hit, and the memory access will continue.
If there is no match even in the page table , then it is considered as page fault , then the page from secondary memory
is to brought into main memory.




Disadvantage Of Paging-
One major disadvantage of paging is-
It increases the effective access time due to increased number of memory accesses.
One memory access is required to get the frame number from the page table.
Another memory access is required to get the word from the page.
 

Translation Lookaside Buffer-
Translation Lookaside Buffer (TLB) is a solution that tries to reduce the effective access time.
Being a hardware, the access time of TLB is very less as compared to the main memory.

s
The TLB is a cache that holds (likely) recently used pages. The principles of locality and temporality (sp) say that the pages referenced in the TLB are likely to be used again soon. This is the underlying idea for all caching. When these pages are needed again, it takes minimal time to find the address of the page in the TLB. The page table itself can be enormous, so walking it to find the address of the needed page can get very expensive.


Best link https://www.tutorialspoint.com/operating_system/os_virtual_memory.htm
Virtual Memory:Paging
Virtual memory breaks programs into fixed-size blocks called pages.
If a computer has abundant physical memory, the operating system loads all of a program's pages into RAM.
If not, the OS fits as much as it can and runs the instructions in those pages.
When the computer is done with those pages, it loads the rest of the program into RAM,
possibly overwriting earlier pages. Because the operating system automatically manages these details,
this frees the software developer to concentrate on program features and not worry about memory issues.
Multiprogramming
Virtual memory with paging lets a computer run many programs at the same time, almost regardless of available RAM. This benefit, called multiprogramming, is a key feature of modern PC operating systems, as they accommodate many utility programs such as printer drivers, network managers and virus scanners at the same time as your applications -- Web browsers, word processors, email and media players.

Paging File
With virtual memory, the computer writes program pages that have not been recently used to an area on the hard drive called a paging file. The file saves the data contained in the pages; if the program needs it again, the operating system reloads it when RAM becomes available. When many programs compete for RAM, the act of swapping pages to the file can slow a computer's processing speed, as it spends more time doing memory management chores and less time getting useful work done. Ideally, a computer will have enough RAM to handle the demands of many programs, minimizing the time the computer spends managing its pages.

Memory Protection
A computer without virtual memory can still run many programs at the same time, although one program might change, accidentally or deliberately, the data in another if its addresses point to the wrong program. Virtual memory prevents this situation because a program never "sees" its physical addresses. The virtual memory manager protects the data in one program from changes by another.

CPU : process a given program
Physical or Main memory or RAM are one and the same . they have a limited storage.
Only pages that are really needed are loaded on to the physical memory , and rest are in the secondary memory(backup storage).
every program only knows the logical address.
logical address is translated into physical address by MMU.
if the page is not found in page table then it is loaded on to the Physcial memory by the operating system.

https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/9_VirtualMemory.html
https://chortle.ccsu.edu/java5/Notes/chap01/ch01_6.html
https://smallbusiness.chron.com/concept-virtual-memory-computer-architecture-65904.html
=========================================================================================================
